from lida import Manager, TextGenerationConfig
from dotenv import load_dotenv
import os
import base64
from PIL import Image
from io import BytesIO
import google.generativeai as genai
from types import SimpleNamespace
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

print("Import Successful!")

load_dotenv()

def base64_to_image(base64_string):
    byte_data = base64.b64decode(base64_string)
    return Image.open(BytesIO(byte_data))

def save_image(base64_str, save_path):
    img = base64_to_image(base64_str)
    img.save(save_path)
    print(f"Image saved at {save_path}")

# Set up Gemini API
genai.configure(api_key="AIzaSyCyDTqVlRyiVkNuM2PhaZJxFuz74acEqzo")

# Create a custom LLM class for Gemini Flash
class GeminiFlashLLM:
    def __init__(self):
        self.provider = "gemini"
        self.model = "gemini-1.5-flash"
        self._model = genai.GenerativeModel('gemini-1.5-flash')

    def generate(self, messages=None, prompt=None, config=None):
        if messages:
            prompt = " ".join([m["content"] for m in messages])
        
        if prompt is None:
            raise ValueError("Either 'messages' or 'prompt' must be provided")

        response = self._model.generate_content(prompt)
        
        return SimpleNamespace(
            text=[{"content": response.text}]
        )

# Initialize LIDA with custom Gemini Flash LLM
lida = Manager(text_gen=GeminiFlashLLM())

print("Model Loaded Successfully!")

textgen_config = TextGenerationConfig(n=1, temperature=0.5, model="gemini-1.5-flash", use_cache=True)

summary = lida.summarize("2019.csv", summary_method="default", textgen_config=textgen_config)

print(summary)

goals = lida.goals(summary, n=2, textgen_config=textgen_config)

for goal in goals:
    print(goal)

i = 0
library = "seaborn"
textgen_config = TextGenerationConfig(n=1, temperature=0.2, use_cache=True)
charts = lida.visualize(summary=summary, goal=goals[i], textgen_config=textgen_config, library=library)  

if charts:
    image_base64 = charts[0].raster
    save_image(image_base64, "lida_generated_chart.png")
    print("LIDA-generated chart saved as lida_generated_chart.png")
else:
    print("No charts were generated by LIDA.")

# Load and inspect the data
data = pd.read_csv("2019.csv")
print("\nColumn names in the CSV file:")
print(data.columns.tolist())

# Create a sample plot based on available columns
plt.figure(figsize=(10, 6))

# Assuming we have columns related to GDP, happiness, and country
gdp_col = [col for col in data.columns if 'gdp' in col.lower()][0] if any('gdp' in col.lower() for col in data.columns) else None
happiness_col = [col for col in data.columns if 'happiness' in col.lower() or 'score' in col.lower()][0] if any('happiness' in col.lower() or 'score' in col.lower() for col in data.columns) else None
country_col = [col for col in data.columns if 'country' in col.lower() or 'region' in col.lower()][0] if any('country' in col.lower() or 'region' in col.lower() for col in data.columns) else None

if gdp_col and happiness_col and country_col:
    sns.scatterplot(x=gdp_col, y=happiness_col, hue=country_col, data=data)
    plt.title(f'Relationship between {gdp_col} and {happiness_col} across different regions', wrap=True)
    plt.savefig("sample_plot.png")
    plt.close()
    print("Sample plot saved as sample_plot.png")
else:
    print("Could not identify appropriate columns for plotting.")

print("\nFirst few rows of the data:")
print(data.head())