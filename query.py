from lida import Manager, TextGenerationConfig
import google.generativeai as genai
import base64
from PIL import Image
from io import BytesIO
from types import SimpleNamespace
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Set up Gemini API with your provided key
genai.configure(api_key="AIzaSyCyDTqVlRyiVkNuM2PhaZJxFuz74acEqzo")

def base64_to_image(base64_string):
    byte_data = base64.b64decode(base64_string)
    return Image.open(BytesIO(byte_data))

def save_image(base64_str, save_path):
    img = base64_to_image(base64_str)
    img.save(save_path)
    print(f"Image saved at {save_path}")

# Create a custom LLM class for Gemini Flash
class GeminiFlashLLM:
    def __init__(self):
        self.provider = "gemini"
        self.model = "gemini-1.5-flash"
        self._model = genai.GenerativeModel('gemini-1.5-flash')

    def generate(self, messages=None, prompt=None, config=None):
        if messages:
            prompt = " ".join([m["content"] for m in messages])
        
        if prompt is None:
            raise ValueError("Either 'messages' or 'prompt' must be provided")

        response = self._model.generate_content(prompt)
        
        return SimpleNamespace(
            text=[{"content": response.text}]
        )

# Initialize LIDA with custom Gemini Flash LLM
lida = Manager(text_gen=GeminiFlashLLM())
textgen_config = TextGenerationConfig(n=1, temperature=0.2, model="gemini-1.5-flash", use_cache=True)

try:
    summary = lida.summarize("2019.csv", summary_method="default", textgen_config=textgen_config)
    print("Summary:", summary)

    user_query = "Which country has the most GDP per capita?"
    charts = lida.visualize(summary=summary, goal=user_query, textgen_config=textgen_config)  

    if charts:
        image_base64 = charts[0].raster
        save_image(image_base64, "lida_generated_chart.png")
        print("LIDA-generated chart saved as lida_generated_chart.png")
    else:
        print("No charts were generated by LIDA. Creating a custom chart.")

        # Load the data and create a custom chart
        data = pd.read_csv("2019.csv")
        
        plt.figure(figsize=(12, 6))
        data = data.sort_values(by='GDP_per_capita', ascending=False).head(20)  # Top 20 countries
        sns.barplot(x='Country_or_region', y='GDP_per_capita', data=data)
        plt.xticks(rotation=90)
        plt.xlabel('Country or Region')
        plt.ylabel('GDP per Capita')
        max_gdp_per_capita = data['GDP_per_capita'].max()
        plt.axhline(y=max_gdp_per_capita, color='red', linestyle='--', label=f'Max GDP: {max_gdp_per_capita:.2f}')
        plt.legend()
        plt.title('Top 20 Countries by GDP per Capita')
        plt.tight_layout()
        plt.savefig("custom_chart.png")
        print("Custom chart saved as custom_chart.png")

except Exception as e:
    print(f"An error occurred: {str(e)}")
    print("Attempting to print data information:")
    try:
        data = pd.read_csv("2019.csv")
        print("\nColumn names:")
        print(data.columns.tolist())
        print("\nFirst few rows:")
        print(data.head())
    except Exception as inner_e:
        print(f"Error while trying to read the CSV: {str(inner_e)}")